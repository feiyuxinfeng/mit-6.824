* Mit6.824
** lab1 MapReduce
** lab2 Raft
   1. RPC需要指定超时时间
   2. 因为RPC是一个阻塞操作,为了性能所以没有枷锁,因此每个RPC完成后,都要检查当前
      的term,state是否和发起rpc的时候一致,并根据结果做相应的处理.
   3. 每一个Term都应该重新初始化election timeout, 这样可以避免无法选主的场景,eg:
      3台机器,挂了一台,剩下A和B, B的日志比A的新,A的election timeout比B的小, 这种
      情况如果不每一个term都重新选择election timeout的话,那基本上不可能完成选主.
      这是一个test中遇到的场景.
   4. 日志数组的第一个元素会被忽略,因为go的slice从0开始,但是raft的paper要求index
      从1开始.但是这个被忽略的元素不能微nil,这主要是为了应付gob
   5. 向applyCh写入的时候,不要使用异步,因为那样会打乱顺序
